<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.enjoyTrip.OdysseyFrontiers.member.model.mapper.MemberMapper">

    <resultMap type="com.enjoyTrip.OdysseyFrontiers.member.model.dto.MemberDto" id="member">
        <result column="member_id" property="memberId"/>
        <result column="name" property="name"/>
        <result column="email_id" property="emailId"/>
        <result column="email_domain" property="emailDomain"/>
<!--         <result column="password" property="password"/>
        <result column="phone" property="phone"/>
        <result column="address" property="address"/> -->
        <result column="birthday" property="birthday"/>
        <result column="join_date" property="joinDate"/>
    </resultMap>

    <resultMap type="com.enjoyTrip.OdysseyFrontiers.member.model.dto.MemberDto" id="extendsMember" extends="member">
        <result column="isFollowing" property="isFollowing"/>
        <result column="isFollowed" property="isFollowed"/>
    </resultMap>
    
    <resultMap id="resultAttr" type="com.enjoyTrip.OdysseyFrontiers.hotplace.model.dto.HotPlaceDto">
        <result column="member_id" property="memberId"/>
        <result column="content_id" property="contentId"/>
        <result column="content_type_id" property="contentTypeId"/>
        <result column="sido_code" property="sidoCode"/>
        <result column="gugun_code" property="gugunCode"/>
        <result column="first_image" property="firstImage"/>
        <result column="created_time" property="createdTime"/>
        <result column="modified_time" property="modifiedTime"/>
    </resultMap>

    <!-- ADMIN -->
    <!-- 	<resultMap type="memberDto" id="memberAll" extends="member">
            <result column="user_password" property="userPwd"/>
            <result column="email_id" property="emailId"/>
            <result column="email_domain" property="emailDomain"/>
            <result column="join_date" property="joinDate"/>
        </resultMap> -->

    <select id="idCheck" parameterType="map" resultType="int">
        select count(member_id)
        from members
        where email_id = #{emailId} and email_domain = #{emailDomain}
    </select>

    <insert id="joinMember" parameterType="memberDto">
        insert into members (name, email_id, email_domain, password, phone,
                             address, birthday, join_date)
        values (#{name}, #{emailId}, #{emailDomain}, #{password}, #{phone},
                #{address},#{birthday}, now())
    </insert>

    <select id="loginMember" parameterType="map" resultMap="member">
        select *
        from members
        where email_id = #{emailId} and email_domain = #{emailDomain} and password = #{password}
    </select>

    <!-- ADMIN -->
    <!-- 	<select id="listMember" resultMap="memberAll">
            select user_name, user_id, user_password, email_id, email_domain, join_date
            from members
            order by join_date
        </select> -->

    <!-- 	<select id="getMember" parameterType="string" resultMap="memberAll">
            select user_id, user_name, user_password, email_id, email_domain, join_date
            from members
            where user_id = #{userId}
        </select> -->

    <update id="updateMember" parameterType="memberDto">
        update members
        <trim prefix="set" suffixOverrides=",">
            <if test="name != null">name = #{name},</if>
            <if test="emailId != null">email_id = #{emailId},</if>
            <if test="emailDomain != null">email_domain = #{emailDomain},</if>
            <if test="phone != null">phone = #{phone},</if>
            <if test="address != null">address = #{address},</if>
            <if test="status != null">status = #{status},</if>
        </trim>
        where member_id = #{memberId}
    </update>

    <update id="updatePassword" parameterType="memberDto">
        update members
        <trim prefix="set" suffixOverrides=",">
            <if test="password != null">password = #{password}</if>
        </trim>
        where member_id = #{memberId}
    </update>

    <select id="findPassword" parameterType="String">
        select password
        from members
        where member_id = #{memberId}
    </select>

    <delete id="deleteMember" parameterType="String">
        delete from members
        where member_id = #{memberId}
    </delete>


    <select id="findByName" parameterType="String" resultMap="member">
        select *
        from members
        where name = #{name}
    </select>

    <select id="findByMemberId" parameterType="Long" resultMap="member">
        select *
        from members
        where member_id = #{memberId}
    </select>

    <select id="findAllMembers" resultMap="member">
        select *
        from members
    </select>


<select id="memberInfo" parameterType="long" resultMap="member">
		select *
		from members
		where member_id = #{memberId}
	</select>

<update id="saveRefreshToken" parameterType="map">
		update members
		set refresh_token = #{token}
		where member_id = #{memberId}
	</update>
	
	<select id="getRefreshToken" parameterType="long" resultType="string">
		select refresh_token
		from members
		where member_id = #{memberId}
	</select>
	
	<update id="deleteRefreshToken" parameterType="map">
		update members
		set refresh_token = #{token, jdbcType=VARCHAR}
		where member_id = #{memberId}
	</update>

    <!-- 팔로우 기능 추가 -->
    <insert id="followMember" parameterType="map">
        insert into followers (follower_id, following_id)
        values (#{followerId}, #{followingId})
    </insert>

    <delete id="unfollowMember" parameterType="map">
        delete from followers
        where follower_id = #{followerId} and following_id = #{followingId};
    </delete>

    <select id="findFollowers" parameterType="long" resultMap="member">
        select m.*
        from followers f
                 join members m on f.follower_id = m.member_id
        where f.following_id = #{memberId};
    </select>

    <select id="findFollowing" parameterType="long" resultMap="member">
        select m.*
        from followers f
                 join members m on f.following_id = m.member_id
        where f.follower_id = #{memberId}
    </select>

    <select id="findAll" resultMap="member">
        select *
        from members;
    </select>
    
    <select id="findByEmailIdOrNameLike" parameterType="String" resultMap="member">
        select *
        from members
        join followers
        on members.member_id = followers.follower_id
        <if test="search != null and search != ' '">
        where members.email_id LIKE CONCAT('%', #{search}, '%') or
            members.name Like CONCAT('%', #{search}, '%')
        </if>
    </select>

    <select id="findAllByLoginMemberId" parameterType="Long" resultMap="extendsMember">
        select
            m.*,
            IF(f1.follower_id IS NOT NULL, 1, 0) AS isFollowing,
            IF(f2.following_id IS NOT NULL, 1, 0) AS isFollowed
        from
            members m
                left join followers f1 on m.member_id = f1.following_id and f1.follower_id = #{loginMemberId}
                left join followers f2 on m.member_id = f2.follower_id and f2.following_id = #{loginMemberId}
    </select>

    <select id="findByEmailIdOrNameLikeByLoginMemberId" parameterType="String" resultMap="extendsMember">
        select
        m.*,
        IF(f1.follower_id IS NOT NULL, 1, 0) AS isFollowing,
        IF(f2.following_id IS NOT NULL, 1, 0) AS isFollowed
        from
        members m
        left join followers f1 on m.member_id = f1.following_id and f1.follower_id = #{loginMemberId}
        left join followers f2 on m.member_id = f2.follower_id and f2.following_id = #{loginMemberId}
        <if test="search != null and search != ''">
            where m.email_id LIKE CONCAT('%', #{search}, '%')
               or m.name LIKE CONCAT('%', #{search}, '%')
        </if>
    </select>
    
     <select id="getMemberInfo" parameterType="map" resultType="com.example.demo.dto.MemberDto" >
         SELECT 
            m.member_id AS memberId,
            m.name,
            m.email_id AS emailId,
            m.email_domain AS emailDomain,
            m.password,
            m.phone,
            m.status,
            m.address,
            m.birthday,
            m.join_date AS joinDate,
            m.token,
            m.image,
            COALESCE(b.boardNum, 0) AS boardNum,
            COALESCE(hp.hotPlaceNum, 0) AS hotPlaceNum,
            COALESCE(p.planNum, 0) AS planNum,
            COALESCE(f.followerNum, 0) AS followedNum,
            COALESCE(fg.followingNum, 0) AS followingNum,
            ch.isFollowing,
            if((SELECT COUNT(*) FROM followers WHERE follower_id = #{memberId} and following_id = #{targetId}) = 0, 'true', 'false') AS isFollowing
        FROM members m
        LEFT JOIN (SELECT member_id, COUNT(*) AS boardNum FROM board where member_id = #{targetId}) b ON m.member_id = b.member_id
        LEFT JOIN (SELECT member_id, COUNT(*) AS hotPlaceNum FROM attraction_like where member_id = #{targetId}) hp ON m.member_id = hp.member_id
        LEFT JOIN (SELECT member_id, COUNT(*) AS planNum FROM plan where member_id = #{targetId}) p ON m.member_id = p.member_id
        LEFT JOIN (SELECT following_id AS member_id, COUNT(*) AS followerNum FROM followers where following_id = #{targetId} GROUP BY following_id) f ON m.member_id = f.member_id
        LEFT JOIN (SELECT follower_id AS member_id, COUNT(*) AS followingNum FROM followers where follower_id = #{targetId} GROUP BY follower_id) fg ON m.member_id = fg.member_id
        WHERE m.member_id = #{targetId}
    </select>
    
    <select id="getMemberHotPlace" parameterType="long" resultMap="resultAttr">
        SELECT  info.content_id,
        		info.member_id,
        		info.content_type_id,
        		info.title,
                info.addr1,
                info.addr2,
                info.zipcode,
                info.tel,
                info.latitude,
                info.longitude,
                info.first_image,
                des.homepage,
                des.overview,
                ah.hit,
                al.likes
        FROM attraction_info as info
              join attraction_description as des
        on info.content_id = des.content_id
        left join (select content_id, count(*) as hit from attraction_hit h group by h.content_id) as ah
        on info.content_id = ah.content_id
        left join (select content_id, count(*) as likes from attraction_like l group by l.content_id) as al
        on info.content_id = al.content_id
		where member_id = #{memberId}

        ORDER BY ah.hit desc;
    </select>
    
    
</mapper>