<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.enjoyTrip.OdysseyFrontiers.member.model.mapper.MemberMapper">

    <resultMap type="com.enjoyTrip.OdysseyFrontiers.member.model.dto.MemberDto" id="member">
        <result column="member_id" property="memberId"/>
        <result column="member_name" property="memberName"/>
        <result column="member_password" property="memberPassword"/>
        <result column="email_id" property="emailId"/>
        <result column="email_domain" property="emailDomain"/>
        <result column="member_phone" property="memberPhone"/>
        <result column="member_address" property="memberAddress"/>
        <result column="join_date" property="joinDate"/>
    </resultMap>

    <!-- ADMIN -->
    <!-- 	<resultMap type="memberDto" id="memberAll" extends="member">
            <result column="user_password" property="userPwd"/>
            <result column="email_id" property="emailId"/>
            <result column="email_domain" property="emailDomain"/>
            <result column="join_date" property="joinDate"/>
        </resultMap> -->

    <select id="idCheck" parameterType="String" resultType="int">
        select count(member_id)
        from members
        where member_id = #{memberId}
    </select>

    <insert id="joinMember" parameterType="memberDto">
        insert into members (member_id, member_name, member_password, email_id, email_domain, member_phone,
        member_address, join_date)
        values (#{memberId}, #{memberName}, #{memberPassword}, #{emailId}, #{emailDomain}, #{memberPhone},
        #{memberAddress}, now())
    </insert>

    <select id="loginMember" parameterType="map" resultMap="member">
        select *
        from members
        where member_id = #{memberId} and member_password = #{memberPassword}
    </select>

    <!-- ADMIN -->
    <!-- 	<select id="listMember" resultMap="memberAll">
            select user_name, user_id, user_password, email_id, email_domain, join_date
            from members
            order by join_date
        </select> -->

    <!-- 	<select id="getMember" parameterType="string" resultMap="memberAll">
            select user_id, user_name, user_password, email_id, email_domain, join_date
            from members
            where user_id = #{userId}
        </select> -->

    <update id="updateMember" parameterType="memberDto">
        update members
        <trim prefix="set" suffixOverrides=",">
            <if test="memberName != null">member_name = #{memberName},</if>
            <if test="emailId != null">email_id = #{emailId},</if>
            <if test="emailDomain != null">email_domain = #{emailDomain},</if>
            <if test="memberPhone != null">member_phone = #{memberPhone},</if>
            <if test="memberAddress != null">member_address = #{memberAddress},</if>
            <if test="status != null">status = #{status},</if>
        </trim>
        where member_id = #{memberId}
    </update>

    <update id="updatePassword" parameterType="memberDto">
        update members
        <trim prefix="set" suffixOverrides=",">
            <if test="memberPassword != null">member_password = #{memberPassword}</if>
        </trim>
        where member_id = #{memberId}
    </update>

    <select id="findPassword" parameterType="String">
        select member_Password
        from members
        where member_id = #{memberId}
    </select>

    <delete id="deleteMember" parameterType="String">
        delete from members
        where member_id = #{memberId}
    </delete>


    <select id="findByMemberName" parameterType="String" resultMap="member">
        select *
        from members
        where member_name = #{memberName}
    </select>

    <select id="findAllMembers" resultMap="member">
        select *
        from members
    </select>


</mapper>